const express = require('express');
const cors = require('cors');
const crypto = require('crypto');

const app = express();
const PORT = process.env.PORT || 5001;

// Middleware
app.use(cors());
app.use(express.json());

// Root endpoint
app.get('/', (req, res) => {
  res.json({
    message: 'Study Tracker API - Simple Version',
    version: '1.0.0',
    status: 'running',
    timestamp: new Date().toISOString()
  });
});

// Health check
app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    message: 'Study Tracker API is running',
    timestamp: new Date().toISOString()
  });
});

// Test endpoint
app.get('/api/test', (req, res) => {
  res.json({
    message: 'API is working!',
    timestamp: new Date().toISOString()
  });
});

// Simple in-memory storage
let users = [];
let studySessions = [];

// Helper function to hash passwords
const hashPassword = (password) => {
  return crypto.createHash('sha256').update(password).digest('hex');
};

// Helper function to generate simple tokens
const generateToken = (userId) => {
  return crypto.randomBytes(32).toString('hex');
};

// Helper function to verify token
const verifyToken = (req, res, next) => {
  const token = req.headers.authorization?.replace('Bearer ', '');
  
  if (!token) {
    return res.status(401).json({
      success: false,
      error: 'No token provided'
    });
  }

  const user = users.find(u => u.token === token);
  if (!user) {
    return res.status(401).json({
      success: false,
      error: 'Invalid token'
    });
  }

  req.user = user;
  next();
};

// Authentication endpoints
app.post('/api/auth/register', (req, res) => {
  const { name, email, password } = req.body;

  if (!name || !email || !password) {
    return res.status(400).json({
      success: false,
      error: 'Name, email, and password are required'
    });
  }

  // Check if user already exists
  const existingUser = users.find(u => u.email === email);
  if (existingUser) {
    return res.status(400).json({
      success: false,
      error: 'User with this email already exists'
    });
  }

  const newUser = {
    id: Date.now().toString(),
    name,
    email,
    password: hashPassword(password),
    token: generateToken(),
    createdAt: new Date().toISOString()
  };

  users.push(newUser);

  res.status(201).json({
    success: true,
    message: 'User registered successfully',
    data: {
      user: {
        id: newUser.id,
        name: newUser.name,
        email: newUser.email
      },
      token: newUser.token
    }
  });
});

app.post('/api/auth/login', (req, res) => {
  const { email, password } = req.body;

  if (!email || !password) {
    return res.status(400).json({
      success: false,
      error: 'Email and password are required'
    });
  }

  const user = users.find(u => u.email === email && u.password === hashPassword(password));
  
  if (!user) {
    return res.status(401).json({
      success: false,
      error: 'Invalid email or password'
    });
  }

  // Generate new token
  user.token = generateToken();

  res.json({
    success: true,
    message: 'Login successful',
    data: {
      user: {
        id: user.id,
        name: user.name,
        email: user.email
      },
      token: user.token
    }
  });
});

app.get('/api/auth/me', verifyToken, (req, res) => {
  res.json({
    success: true,
    data: {
      user: {
        id: req.user.id,
        name: req.user.name,
        email: req.user.email
      }
    }
  });
});

// Get all study sessions (now requires authentication)
app.get('/api/study-sessions', verifyToken, (req, res) => {
  // Filter sessions by user
  const userSessions = studySessions.filter(session => session.userId === req.user.id);
  
  res.json({
    success: true,
    data: userSessions
  });
});

// Create a new study session
app.post('/api/study-sessions', verifyToken, (req, res) => {
  const { date, duration, notes } = req.body;
  
  if (!date || !duration) {
    return res.status(400).json({
      success: false,
      error: 'Date and duration are required'
    });
  }

  const newSession = {
    id: Date.now().toString(),
    userId: req.user.id,
    date,
    duration: parseInt(duration),
    notes: notes || '',
    createdAt: new Date().toISOString()
  };

  studySessions.push(newSession);

  res.status(201).json({
    success: true,
    data: newSession
  });
});

// Update a study session
app.put('/api/study-sessions/:id', verifyToken, (req, res) => {
  const { id } = req.params;
  const { date, duration, notes } = req.body;

  const sessionIndex = studySessions.findIndex(session => session.id === id && session.userId === req.user.id);
  
  if (sessionIndex === -1) {
    return res.status(404).json({
      success: false,
      error: 'Study session not found'
    });
  }

  studySessions[sessionIndex] = {
    ...studySessions[sessionIndex],
    date: date || studySessions[sessionIndex].date,
    duration: duration ? parseInt(duration) : studySessions[sessionIndex].duration,
    notes: notes !== undefined ? notes : studySessions[sessionIndex].notes,
    updatedAt: new Date().toISOString()
  };

  res.json({
    success: true,
    data: studySessions[sessionIndex]
  });
});

// Delete a study session
app.delete('/api/study-sessions/:id', verifyToken, (req, res) => {
  const { id } = req.params;
  
  const sessionIndex = studySessions.findIndex(session => session.id === id && session.userId === req.user.id);
  
  if (sessionIndex === -1) {
    return res.status(404).json({
      success: false,
      error: 'Study session not found'
    });
  }

  const deletedSession = studySessions.splice(sessionIndex, 1)[0];

  res.json({
    success: true,
    data: deletedSession
  });
});

// Get study sessions by date
app.get('/api/study-sessions/date/:date', verifyToken, (req, res) => {
  const { date } = req.params;
  
  const sessionsForDate = studySessions.filter(session => session.date === date && session.userId === req.user.id);
  
  res.json({
    success: true,
    data: sessionsForDate
  });
});

// Get study statistics
app.get('/api/study-sessions/stats', verifyToken, (req, res) => {
  const userSessions = studySessions.filter(session => session.userId === req.user.id);
  const totalSessions = userSessions.length;
  const totalDuration = userSessions.reduce((sum, session) => sum + session.duration, 0);
  const averageDuration = totalSessions > 0 ? Math.round(totalDuration / totalSessions) : 0;

  res.json({
    success: true,
    data: {
      totalSessions,
      totalDuration,
      averageDuration
    }
  });
});

// Start server
app.listen(PORT, () => {
  console.log(`ðŸš€ Study Tracker API (simple) running on port ${PORT}`);
  console.log(`ðŸ”— Health check: http://localhost:${PORT}/api/health`);
  console.log(`ðŸ”— Root endpoint: http://localhost:${PORT}/`);
  console.log(`ðŸ“Š Study sessions: http://localhost:${PORT}/api/study-sessions`);
});

module.exports = app; 